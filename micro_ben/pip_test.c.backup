#include <stdio.h>
#include <stdlib.h>
#include "assert.h"

#define MAX_LEN 128

static double data_input[16];

struct port2pid *p2p = NULL;
struct fd2port  *f2p = NULL;

int
handle_ekf(int ifd_read)
{

	//char   data_line[16][MAX];
	char data[MAX_LEN];
	double * pos;
	int    len;

	len = read(ifd_read, data, MAX_LEN);
	printf("->read from: %d\n", ifd_read);
	printf("->len: %d\n", len);
	printf("->data: %s\n", data);
	//printf("->write to: %d\n", ofd_write);
	//len = write(ofd_write, data, len);

	return 0;
}

int 
main(int argc, char *argv[]) {

	char   recv_data[MAX_LEN] = {0};
	char   buff[MAX_LEN] = {0};
	int    bytes_recv = 0;
	int    in_fd[2] = {0}, out_fd[2] = {0};
	int    pid, c_port, ep_wait, i = 0;
	long   iport;
	int    tmp;
	char   test[1000] = "thisisatest";


	if (pipe(in_fd) < 0) {
		perror("pipe error");
		exit(-1);
	}
	//setnonblocking(in_fd[1]); //set nonblocking pipe

	pid = fork();

	if(pid < 0) { 
		perror("fork error"); 
		exit(-1); 
	} else if (pid == 0) { // child
		close(in_fd[1]);
		read(in_fd[0], buff, MAX_LEN);
		printf("->read from: %d\n", in_fd[0]);
		printf("->data: %s\n", buff);
	} else { //parent
		close(in_fd[0]);
		printf("write to: %d\n", in_fd[1]);
		printf("test: %s\n", test);
		printf("len : %d\n", sizeof(test));
		write(in_fd[1], test, sizeof(test)+1);

    	//read(out_fd[0], buff, MAX_LEN);
		//printf("read from: %d\n", out_fd[0]);
		//printf("buf: %s\n", buff);
	}	

   	return 0;
}
